{"version":3,"sources":["implementation.js","index.js"],"names":["createInfernoContext","MAX_SIGNED_31_BIT_INT","objectIs","x","y","createEventEmitter","value","handlers","on","handler","push","off","filter","h","get","set","newValue","changedBits","forEach","onlyChild","children","Array","isArray","defaultValue","calculateChangedBits","contextProp","Provider","Component","props","getChildContext","emitter","componentWillReceiveProps","nextProps","oldValue","render","PropTypes","object","isRequired","Consumer","getValue","observedBits","setState","componentDidMount","context","onUpdate","componentWillUnmount","state"],"mappings":"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","file":"index.map","sourceRoot":"..\\..\\src","sourcesContent":["// @flow\r\nimport { Component } from 'inferno';\r\nimport PropTypes from 'prop-types';\r\nimport gud from 'gud';\r\n\r\nconst MAX_SIGNED_31_BIT_INT = 1073741823;\r\n\r\n// Inlined Object.is polyfill.\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\nfunction objectIs(x, y) {\r\n  if (x === y) {\r\n    return x !== 0 || 1 / x === 1 / (y: any);\r\n  } else {\r\n    return x !== x && y !== y;\r\n  }\r\n}\r\n\r\nfunction createEventEmitter(value) {\r\n  let handlers = [];\r\n  return {\r\n    on(handler) {\r\n      handlers.push(handler);\r\n    },\r\n\r\n    off(handler) {\r\n      handlers = handlers.filter(h => h !== handler);\r\n    },\r\n\r\n    get() {\r\n      return value;\r\n    },\r\n\r\n    set(newValue, changedBits) {\r\n      value = newValue;\r\n      handlers.forEach(handler => handler(value, changedBits));\r\n    }\r\n  };\r\n}\r\n\r\nfunction onlyChild(children) {\r\n  return Array.isArray(children) ? children[0] : children;\r\n}\r\n\r\nfunction createInfernoContext(defaultValue, calculateChangedBits) {\r\n  const contextProp = '__create-inferno-context-' + gud() + '__';\r\n\r\n  class Provider extends Component {\r\n    emitter = createEventEmitter(this.props.value);\r\n\r\n    static childContextTypes = {\r\n      [contextProp]: PropTypes.object.isRequired\r\n    };\r\n\r\n    getChildContext() {\r\n      return {\r\n        [contextProp]: this.emitter\r\n      };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      if (this.props.value !== nextProps.value) {\r\n        let oldValue = this.props.value;\r\n        let newValue = nextProps.value;\r\n        let changedBits: number;\r\n\r\n        if (objectIs(oldValue, newValue)) {\r\n          changedBits = 0; // No change\r\n        } else {\r\n          changedBits =\r\n            typeof calculateChangedBits === 'function'\r\n              ? calculateChangedBits(oldValue, newValue)\r\n              : MAX_SIGNED_31_BIT_INT;\r\n\r\n          changedBits |= 0;\r\n\r\n          if (changedBits !== 0) {\r\n            this.emitter.set(nextProps.value, changedBits);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return this.props.children;\r\n    }\r\n  }\r\n\r\n  class Consumer extends Component {\r\n    static contextTypes = {\r\n      [contextProp]: PropTypes.object\r\n    };\r\n\r\n    observedBits: number;\r\n\r\n    state = {\r\n      value: this.getValue()\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      let { observedBits } = nextProps;\r\n      this.observedBits =\r\n        observedBits === undefined || observedBits === null\r\n          ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default\r\n          : observedBits;\r\n    }\r\n\r\n    componentDidMount() {\r\n      if (this.context[contextProp]) {\r\n        this.context[contextProp].on(this.onUpdate);\r\n      }\r\n      let { observedBits } = this.props;\r\n      this.observedBits =\r\n        observedBits === undefined || observedBits === null\r\n          ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default\r\n          : observedBits;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this.context[contextProp]) {\r\n        this.context[contextProp].off(this.onUpdate);\r\n      }\r\n    }\r\n\r\n    getValue() {\r\n      if (this.context[contextProp]) {\r\n        return this.context[contextProp].get();\r\n      } else {\r\n        return defaultValue;\r\n      }\r\n    }\r\n\r\n    onUpdate = (newValue, changedBits: number) => {\r\n      const observedBits: number = this.observedBits | 0;\r\n      if ((observedBits & changedBits) !== 0) {\r\n        this.setState({ value: this.getValue() });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      return onlyChild(this.props.children)(this.state.value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    Provider,\r\n    Consumer\r\n  };\r\n}\r\n\r\nexport default createInfernoContext;\r\n","// @flow\r\nimport createInfernoContext from './implementation';\r\n\r\nexport default createInfernoContext;\r\n"]}